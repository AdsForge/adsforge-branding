name: Deploy Next.js to EC2

on:
  push:
    branches: [main]
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: next-build
          path: |
            .next/
            public/
            package.json
            deploy.sh
            pnpm-lock.yaml
            prisma/

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: .

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          config: |
            Host ec2
              HostName ${{ secrets.EC2_HOST }}
              User ${{ secrets.EC2_USERNAME }}
              StrictHostKeyChecking no
              ConnectTimeout 30
              ServerAliveInterval 60
              ServerAliveCountMax 30

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # Create deployment package
          tar -czf deploy.tar.gz .next public prisma package.json pnpm-lock.yaml deploy.sh

          # Copy deployment package to EC2
          scp -C -o ConnectTimeout=60 -o ServerAliveInterval=60 deploy.tar.gz ec2:$DEPLOY_PATH

          # Setup and deploy on EC2
          ssh ec2 'bash -s' < ./deploy.sh
